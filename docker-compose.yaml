services:
  product-db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: productdb
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_ROOT_HOST: '%'
    ports:
      - "3306:3306"
    volumes:
      - product-db-data:/var/lib/mysql
    networks:
      - elk
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      retries: 5
      start_period: 20s

  product-api:
    build: product-api/.
    restart: unless-stopped
    ports:
      - "8082:8082"
    depends_on:
      product-db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://product-db:3306/productdb
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: rootpassword
    volumes:
      - ./shared-logs/product-api:/var/logs/api-logs/product-api
    networks:
      - elk

  order-db:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: orderdb
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_ROOT_HOST: '%'
    ports:
      - "3307:3306"
    volumes:
      - order-db-data:/var/lib/mysql
    networks:
      - elk
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      retries: 5
      start_period: 20s

  order-api:
    build: order-api/.
    restart: unless-stopped
    ports:
      - "8083:8083"
    depends_on:
      order-db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://order-db:3306/orderdb
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: rootpassword
    volumes:
      - ./shared-logs/order-api:/var/logs/api-logs/order-api
    networks:
      - elk

#  user-db:
#    image: mysql:8.0
#    environment:
#      MYSQL_DATABASE: userdb
#      MYSQL_ROOT_PASSWORD: rootpassword
#      MYSQL_ROOT_HOST: '%'
#    ports:
#      - "3308:3306"
#    volumes:
#      - user-db-data:/var/lib/mysql
#    networks:
#      - elk
#    healthcheck:
#      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
#      interval: 10s
#      retries: 5
#      start_period: 20s
#
#  user-api:
#    build: user-api/.
#    restart: unless-stopped
#    ports:
#      - "8084:8084"
#    depends_on:
#      user-db:
#        condition: service_healthy
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:mysql://user-db:3306/userdb
#      SPRING_DATASOURCE_USERNAME: root
#      SPRING_DATASOURCE_PASSWORD: rootpassword
#      volumes:
#        - ./shared-logs/user-api:/var/logs/api-logs/user-api
#    networks:
#      - elk

  elasticsearch:
    build:
      context: "./elasticsearch/"
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: "./elasticsearch/config/elasticsearch.yml"
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - "./elasticsearch/data:/var/lib/elasticsearch/data"
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: elastic
      discovery.type: single-node
      xpack.security.enabled: false
    networks:
      - elk

  logstash:
    build:
      context: "./logstash/"
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: "./logs"
        target: /var/log/app
        read_only: true
      - type: bind
        source: "./logstash/config/logstash.yml"
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: "./logstash/pipeline"
        target: /usr/share/logstash/pipeline
        read_only: true
      - type: bind
        source: "./logs"
        target: /var/log/app
        read_only: true
    ports:
      - "5001:5001/tcp"
      - "5001:5001/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: "./kibana/"
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: "./kibana/config/kibana.yml"
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      JVMFLAGS: "-Djava.net.preferIPv4Stack=true"
    networks:
      - elk

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_BALANCE_DELAY_MS: 0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - elk

networks:
  elk:
    driver: bridge

volumes:
  order-db-data:
  product-db-data:
#  user-db-data:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
